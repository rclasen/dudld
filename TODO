cleanup use of int/uint for IDs

convert callbacks/signals/* to glib

connections are dropped when there is too much pending data to send to the
client. Increasing the buffer won't help with large data sets. This the
server has to block on writes (at least for some time). This also means
the server hase to use multiple threads/-processes. Multiple processes
won't work with the cache table. Threads require some kind of locking to
avoid multiple concurrent queries.

with threads:
- fix proto_fmt - get rid of static buffer
- serialize global data: clients, filter, sleep (, options?)
- serialize player access
- serialize DB access
- one thread per client, blocking write, per-thread main-loop that checks
  incoming client cmds + broadcasts from dudld.
- one thread to accept new clients?

same process:
- when starting to process client command (proto_input) suspend reading
  further client input. Avoids hogging server resources.
- instead of sending output to the client directly put a "message" object
  into it's out-queue.
- process client's message queue from main_loop (when socket is writable)
- opt: suspend queue processing (i.e. main loop socket watch) when queue
  is empty
- resume reading client input when message queue is empty
- message:
  - provides iterator to get next line to send to client
  - iterator frees used memory itself on disposal

find way to deal with "broken" files. (set/view stor_file flag)

get rid of cache table
- (tmp table) breaks multiple DB connections
- attribute changes are not automatically rematched against filter

get rid of lastplay column for files, use "last" record from history table

change lastplay evaluation for random 
- to be more random for anything but the last played xx tracks
- to take score into account
- only look at lastplay for tracks picked by random play. (non-queued)
- introdcue "last" for tracks picked by random play

make randomness configurable - see pgdb/random.c:
- algorithm (none/plain/abs/divi/first)
- max percent (curently hardcoded 33%)
- max total (used to be hardcoded to 1000)

introduce tag-types: genre, preference, selection/playlist

include lastplay/history data in all track results
include tags data in all track results

cleanup error reporting:
 use values from errno.h
 use the same 5xx replies for all commands

rename tables from mserv_<name> to juke_<name> or mus_<name>

who caused a broadcast message ???

make filter parser modular (for queue and history filter)

complete parsexpr / filter / random

scoring: play some tracks more often
- most likely := max( (lastplay - now) base^(score/factor))
  score:=-2, ... +2

more sophisticated permission system

secure authentication? encrypted connection?

multiple (anonymous) instances. cur. not possible because:
 track.lastplay
 track.available?
 history
 queue
 user/permission

allow several tracks per file (allows cutting out junk with junk-skip)

"normalize" volume level - replaygain
- gstreamer::rganalysis
- ?gstreamer::rgvolume?
- http://replaygain.org/
- mp3gain
- gstreamer::volume::volume = 10^(rgain/20) * 10^(preamp/20) = 10^( (rgain+preamp)/20 )
- dudld knobs: rg=off/peak/average, preamp=double/db



integrate dudl with test-listening and renaming

go back to previous track

runtime gstreamer output selection?
inject tags from DB (taginject element in recent gst releases)

more queue controls
 move
 insert

voting: play the song most users requested

?support for other file formats like ogg

add rtsp control
